{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","step","window","confirm","alert","status","current","winner","moves","map","move","desc","jumpTo","resetGameButton","resetGame","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"0OAKA,SAASA,EAAOC,GACZ,OACE,wBAAQC,UAAU,SAASC,QAASF,EAAME,QAA1C,SACGF,EAAMG,Q,IAKPC,E,kKACJ,SAAaC,GAAI,IAAD,OACd,OACE,cAACN,EAAD,CAAQI,MAAOG,KAAKN,MAAMO,QAAQF,GACtBH,QAAS,kBAAM,EAAKF,MAAME,QAAQG,Q,oBAKlD,WACE,OACE,gCACE,sBAAKJ,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,MAErB,sBAAKP,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,MAErB,sBAAKP,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,a,GAzBTC,IAAMC,WAgCpBC,E,kDACJ,WAAYX,GAAO,IAAD,8BAChB,cAAMA,IACDY,MAAQ,CACXC,QAAS,CAAC,CACRN,QAASO,MAAM,GAAGC,KAAK,QAEzBC,WAAW,EACXC,SAAQ,GAPM,E,+CAWlB,SAAYZ,GACV,IAAMQ,EAAUP,KAAKM,MAAMC,QAAQK,MAAM,EAAGZ,KAAKM,MAAMI,WAAa,GAE9DT,EADUM,EAAQA,EAAQM,OAAS,GACjBZ,QAAQW,QAC7BE,EAAgBb,IAAYA,EAAQF,KAKvCE,EAAQF,GAAKC,KAAKM,MAAMK,QAAU,IAAM,IACxCX,KAAKe,SAAS,CACVR,QAAUA,EAAQS,OAAO,CAAC,CACxBf,QAAQA,KAEVS,WAAaH,EAAQM,OACrBF,SAAUX,KAAKM,MAAMK,a,oBAI3B,SAAOM,GACLjB,KAAKe,SAAS,CACZL,WAAYO,EACZN,QAAUM,EAAO,IAAO,M,uBAI5B,WAEeC,OAAOC,QAAQ,yCAG1BnB,KAAKe,SAAS,CACZR,QAAS,CAAC,CACRN,QAASO,MAAM,GAAGC,KAAK,QAEzBC,WAAW,EACXC,SAAQ,IAGVS,MAAM,yBAIPA,MAAM,+B,oBAIT,WAAU,IAoBJC,EApBG,OACDd,EAAUP,KAAKM,MAAMC,QACrBe,EAAUf,EAAQP,KAAKM,MAAMI,YAC7Ba,EAAST,EAAgBQ,EAAQrB,SAEjCuB,EAAQjB,EAAQkB,KAAI,SAACR,EAAMS,GAC/B,IAAMC,EAAOD,EACT,eAAiBA,EACjB,mBACA,OAEE,6BACE,wBAAQ9B,QAAS,kBAAM,EAAKgC,OAAOF,IAAnC,SAA2CC,KADpCD,MAOXG,EAAkB,wBAAQlC,UAAU,cAAcC,QAAS,kBAAM,EAAKkC,aAApD,mBAYxB,OAPET,EAFCE,EAEQ,YAAcA,EAId,kBAAoBvB,KAAKM,MAAMK,QAAS,IAAM,KAIvD,sBAAKhB,UAAU,OAAf,UACE,qBAAKA,UAAU,aAAf,SACE,cAACG,EAAD,CACEG,QAASqB,EAAQrB,QACjBL,QAAW,SAACG,GAAD,OAAO,EAAKgC,YAAYhC,QAIvC,sBAAKJ,UAAU,YAAf,UACE,8BAAM0B,IACN,8BAAMQ,IACN,6BAAKL,OAEP,+B,GAvGWrB,IAAMC,WAyHzB,SAASU,EAAgBb,GAWvB,IAVA,IAAM+B,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAjC,EAAI,EAAGA,EAAIiC,EAAMnB,OAAQd,IAAK,CACrC,kBAAkBiC,EAAMjC,GAAxB,GAAOkC,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GAAIlC,EAAQgC,IAAMhC,EAAQgC,KAAOhC,EAAQiC,IAAMjC,EAAQgC,KAAOhC,EAAQkC,GACpE,OAAOlC,EAAQgC,GAGnB,OAAO,KAvBTG,IAASC,OACP,cAAChC,EAAD,IACAiC,SAASC,eAAe,W","file":"static/js/main.c8a39406.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n\r\nfunction Square(props) {\r\n    return (\r\n      <button className=\"square\" onClick={props.onClick}>\r\n        {props.value}\r\n      </button>\r\n    );\r\n  }\r\n  \r\n  class Board extends React.Component {\r\n    renderSquare(i) {\r\n      return (\r\n        <Square value={this.props.squares[i]}\r\n                    onClick={() => this.props.onClick(i)}\r\n        />\r\n      );\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <div>          \r\n          <div className=\"board-row\">\r\n            {this.renderSquare(0)}\r\n            {this.renderSquare(1)}\r\n            {this.renderSquare(2)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(3)}\r\n            {this.renderSquare(4)}\r\n            {this.renderSquare(5)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(6)}\r\n            {this.renderSquare(7)}\r\n            {this.renderSquare(8)}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  class Game extends React.Component {\r\n    constructor(props){\r\n      super(props);\r\n      this.state = {\r\n        history: [{\r\n          squares: Array(9).fill(null),\r\n        }],\r\n        stepNumber:0,\r\n        xIsNext:true,\r\n      }\r\n    }\r\n\r\n    handleClick(i){\r\n      const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n      const current = history[history.length - 1];\r\n      const squares = current.squares.slice();\r\n      if(calculateWinner(squares) || squares[i]){\r\n        return;\r\n      }\r\n\r\n    \r\n      squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n      this.setState({\r\n          history : history.concat([{\r\n            squares:squares\r\n          }]),\r\n          stepNumber : history.length,\r\n          xIsNext: !this.state.xIsNext,\r\n      });\r\n    }\r\n\r\n    jumpTo(step){\r\n      this.setState({\r\n        stepNumber: step,\r\n        xIsNext: (step % 2) === 0,\r\n      });\r\n    }\r\n\r\n    resetGame(){\r\n\r\n      var result = window.confirm(\"Are you sure you want to reset game?\");\r\n      if(result)\r\n      {\r\n        this.setState({\r\n          history: [{\r\n            squares: Array(9).fill(null),\r\n          }],\r\n          stepNumber:0,\r\n          xIsNext:true,\r\n        });\r\n\r\n        alert(\"Game rest completed!\");\r\n     }\r\n     else\r\n     {\r\n       alert(\"User denied to reset game\");\r\n     }\r\n    }\r\n\r\n    render() {\r\n      const history = this.state.history;\r\n      const current = history[this.state.stepNumber];\r\n      const winner = calculateWinner(current.squares);\r\n\r\n      const moves = history.map((step, move) => {\r\n        const desc = move ?\r\n            'Go to move #' + move :\r\n            'Go to game start';\r\n            return(\r\n              \r\n              <li key={move}>\r\n                <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n              </li>\r\n            )\r\n      });\r\n \r\n      // KP Defined\r\n      const resetGameButton = <button className=\"resetButton\" onClick={() => this.resetGame()}>Reset</button>;\r\n       \r\n      let status;\r\n      if(winner)\r\n      {\r\n        status = 'Winner : ' + winner;\r\n      } \r\n      else\r\n      {\r\n        status = 'Next player : ' + (this.state.xIsNext? 'X' : 'O');\r\n      } \r\n\r\n      return (          \r\n        <div className=\"game\">\r\n          <div className=\"game-board\">\r\n            <Board \r\n              squares={current.squares}\r\n              onClick = {(i) => this.handleClick(i)}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"game-info\">\r\n            <div>{status}</div>\r\n            <div>{resetGameButton}</div>\r\n            <ol>{moves}</ol>\r\n          </div>\r\n          <div>\r\n         \r\n          \r\n         \r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n  );\r\n  \r\n\r\n  function calculateWinner(squares) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return squares[a];\r\n      }\r\n    }\r\n    return null;\r\n  }"],"sourceRoot":""}